info:
  license:
    name: MIT
  title: userApi
  version: 1.0.0
openapi: 3.0.0
paths:
  /currency/:
    get:
      tags:
        - Currency
      summary: Get currencies list.
      operationId: app.api.v1.currency.read_all
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: List of currencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        204:
          description: No content.
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error.
    post:
      tags:
        - Currency
      summary: Create currency.
      operationId: app.api.v1.currency.add
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  description: Currency title. max-min Length 3.
                  type: string
                  maxLength: 3
                  minLength: 3
      responses:
        '200':
          description: Duplicate currency.
          content:
            application/json:
              schema:
                type: object
                properties:
                  duplicate:
                    type: string
                    example: Value not unique
        '201':
          description: Currency created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency_id:
                    type: integer
                    example: 1
        204:
          description: No content.
        400:
          description: Bad request
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error.
  /currency/{id_}:
    delete:
      tags:
        - Currency
      summary: Delete currency.
      operationId: app.api.v1.currency.delete
      parameters:
        - $ref: '#/components/parameters/id_'
      responses:
        '200':
          description: Deleted currency.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
                    example: true
        204:
          description: No content.
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error.
  /users/:
    get:
      tags:
        - Users
      summary: Read users.
      operationId: app.api.v1.users.read_all
      parameters:
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        204:
          description: No content.
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error.
    post:
      tags:
        - Users
      summary: Create user.
      operationId: app.api.v1.users.add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Return created user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        204:
          description: No content.
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error
  /users/{id_}:
    delete:
      tags:
        - Users
      summary: Delete user.
      operationId: app.api.v1.users.delete
      parameters:
        - $ref: '#/components/parameters/id_'
      responses:
        '200':
          description: Deleted user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
                    example: true
        204:
          description: No content.
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error.
  /profile/:
    get:
      tags:
        - Profile
      summary: Read user info WORKING
      operationId: app.api.v1.profile.get
      responses:
        '200':
          description: User info
        default:
          description: unexpected error
      security:
        - basic: []
    put:
      tags:
        - Profile
      summary: Update user info WORKING
      operationId: app.api.v1.profile.update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: User name
                  type: string
                file:
                  description: User avatar
                  type: string
                  format: binary
      responses:
        '200':
          description: A paged array of pets
        default:
          description: unexpected error
      security:
        - basic: []
  /profile/avatar/:
    get:
      operationId: app.api.v1.profile.avatar
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
      summary: Read user avatar WORKING
      tags:
        - Profile
      security:
        - basic: [ ]
  /profile/product-list/:
    post:
      tags:
        - Profile
      summary: Create user product-list WORKING
      operationId: app.api.v1.product_list.create
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  description: Product list title
                  type: string
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
      security:
          - basic: []
    get:
      security:
          - basic: []
      summary: Read product-list products
      operationId: app.api.v1.product_list.read
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
      tags:
        - Profile
    delete:
      tags:
        - Profile
      summary: Delete product-list
      operationId: app.api.v1.product_list.delete
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
      security:
        - basic: [ ]
  /profile/product-list/product:
    post:
      tags:
        - Profile
      summary: Add product to product-list WORKING
      operationId: app.api.v1.product_list.add_product
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                products_list_id:
                  description: Product list id
                  format: int64
                  minimum: 1
                  type: integer
                product_id:
                  description: Product id
                  format: int64
                  minimum: 1
                  type: integer
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
      security:
          - basic: []
    delete:
      tags:
        - Profile
      summary: Delete product from product-list WORKING
      operationId: app.api.v1.product_list.delete_product
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                products_list_id:
                  description: Product list id
                  format: int64
                  minimum: 1
                  type: integer
                product_id:
                  description: Product id
                  format: int64
                  minimum: 1
                  type: integer
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
      security:
        - basic: [ ]
  /product/:
    post:
      tags:
        - Product
      summary: Create product WORKING
      operationId: app.api.v1.products.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
    get:
      tags:
        - Product
      summary: Read products WORKING
      operationId: app.api.v1.products.read_all
      responses:
        200:
          description: List of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        204:
          description: No content.
        500:
          $ref: '#/components/responses/500'
        default:
          description: Unexpected error.
  /product/{id_}:
    delete:
      tags:
        - Product
      summary: Delete product WORKING
      operationId: app.api.v1.products.delete
      parameters:
        - $ref: '#/components/parameters/id_'
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
  /product/{id_}/image/:
    post:
      tags:
        - Product
      summary: Update product WORKING
      operationId: app.api.v1.products.image
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Product image
                  type: string
                  format: binary
      parameters:
        - $ref: '#/components/parameters/id_'
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
    get:
      summary: Read user avatar WORKING
      tags:
        - Product
      operationId: app.api.v1.products.get_image
      parameters:
        - $ref: '#/components/parameters/id_'
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
  /product/{id_}/price/:
    get:
      summary: Read product prices WORKING
      tags:
        - Product
      operationId: app.api.v1.price.get
      parameters:
        - $ref: '#/components/parameters/id_'
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        default:
          description: unexpected error
  /product/price/:
    put:
      tags:
        - Product
      summary: Update product WORKING
      operationId: app.api.v1.price.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Price'
      responses:
        '200':
          description: ok
        default:
          description: unexpected error
servers:
  - url: /v1
components:
  responses:
    '200':
      description: success
    '201':
      description: created
    '204':
      description: no content
    '400':
      description: bad request
    '404':
      description: not found
    '500':
      description: server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: Message of error info.
                type: string
    default:
      description: Unexpected error.
  requestBodies:
    PetBody:
      description: A JSON object containing pet information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  parameters:
    id_:
      name: id_
      description: ID
      in: path
      required: true
      schema:
        format: int64
        minimum: 1
        type: integer
    sort:
      in: query
      name: sort
      schema:
        type: string
        enum: [asc, desc]
      description: >
        Sort order:
         * `asc` - Ascending, from A to Z

         * `desc` - Descending, from Z to A
    page:
      in: query
      name: page
      schema:
        type: integer
        default: 1
        minimum: 1
    page_size:
      in: query
      name: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 10
        default: 5
  schemas:
    Currency:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: UAH
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          example: Product №1
        article:
          type: string
          example: superlogin
        image:
          type: string
          example: image.jpeg
      required:
        - title
        - article
        - image
    Price:
      type: object
      properties:
        product_id:
          type: integer
          example: 3
        currency_id:
          type: integer
          example: 4
        price:
          type: number
          example: 555.5
      required:
        - product_id
        - currency_id
    User:
      type: object
      properties:
        avatar:
          type: string
          readOnly: true
          nullable: true
        id:
          type: integer
          example: 1
          readOnly: true
        name:
          type: string
          example: Dexter
        login:
          type: string
          example: superlogin
          minimum: 8
        password:
          type: string
          example: superpassword
          minimum: 8
      required:
        - name
        - login
        - password
  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: app.tools.check_auth

